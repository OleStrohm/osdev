# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

ifeq ($(origin CC), default)
  CC = i686-elf-gcc
endif
ifeq ($(origin CXX), default)
  CXX = i686-elf-g++
endif
ifeq ($(origin AR), default)
  AR = i686-elf-ar
endif
RESCOMP = i686-elf-windres
TARGETDIR = ../build/kernel/bin/Debug
TARGET = $(TARGETDIR)/kernel
OBJDIR = ../build/kernel/obj
DEFINES += -DDEBUG
INCLUDES +=
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g --sysroot=/home/ole/workspace/os/sysroot -isystem=/usr/include -MD -c -g -ffreestanding -O2 -Wall -Wextra
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g --sysroot=/home/ole/workspace/os/sysroot -isystem=/usr/include -MD -c -g -ffreestanding -O2 -Wall -Wextra
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += ../build/k/bin/Debug/libk.a
LDDEPS += ../build/k/bin/Debug/libk.a
ALL_LDFLAGS += $(LDFLAGS) --sysroot=/home/ole/workspace/os/sysroot -isystem=/usr/include -ffreestanding -O2 -nostdlib -lgcc -lk -T ./arch/i386/linker.ld ./arch/i386/crtbegin.o ./arch/i386/crtend.o
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
	@echo Copying headers
	mkdir -p ../sysroot/usr/include
	cp -RT ./include ../sysroot/usr/include
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
	@echo Creating iso
	mkdir -p ../sysroot/boot
	cp ../build/kernel/bin/Debug/kernel ../sysroot/boot
	mkdir -p ../isodir/boot/grub
	cp ../build/kernel/bin/Debug/kernel ../isodir/boot/kernel
	echo 'menuentry "os" {' > ../isodir/boot/grub/grub.cfg
	echo 'multiboot /boot/kernel' >> ../isodir/boot/grub/grub.cfg
	echo '}' >> ../isodir/boot/grub/grub.cfg
	grub-mkrescue -o ../os.iso ../isodir
endef

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/boot.o
GENERATED += $(OBJDIR)/crti.o
GENERATED += $(OBJDIR)/crtn.o
GENERATED += $(OBJDIR)/exception.o
GENERATED += $(OBJDIR)/gdt.o
GENERATED += $(OBJDIR)/gdt1.o
GENERATED += $(OBJDIR)/idt.o
GENERATED += $(OBJDIR)/idt1.o
GENERATED += $(OBJDIR)/interrupt.o
GENERATED += $(OBJDIR)/kernel.o
GENERATED += $(OBJDIR)/keyboard.o
GENERATED += $(OBJDIR)/pit.o
GENERATED += $(OBJDIR)/tty.o
OBJECTS += $(OBJDIR)/boot.o
OBJECTS += $(OBJDIR)/crti.o
OBJECTS += $(OBJDIR)/crtn.o
OBJECTS += $(OBJDIR)/exception.o
OBJECTS += $(OBJDIR)/gdt.o
OBJECTS += $(OBJDIR)/gdt1.o
OBJECTS += $(OBJDIR)/idt.o
OBJECTS += $(OBJDIR)/idt1.o
OBJECTS += $(OBJDIR)/interrupt.o
OBJECTS += $(OBJDIR)/kernel.o
OBJECTS += $(OBJDIR)/keyboard.o
OBJECTS += $(OBJDIR)/pit.o
OBJECTS += $(OBJDIR)/tty.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking kernel
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning kernel
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/boot.o: arch/i386/boot.s
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/crti.o: arch/i386/crti.s
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/crtn.o: arch/i386/crtn.s
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/exception.o: arch/i386/exception.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/gdt.o: arch/i386/gdt.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/gdt1.o: arch/i386/gdt.s
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/idt.o: arch/i386/idt.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/idt1.o: arch/i386/idt.s
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/interrupt.o: arch/i386/interrupt.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pit.o: arch/i386/pit.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/tty.o: arch/i386/tty.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/kernel.o: kernel/kernel.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/keyboard.o: kernel/keyboard.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif